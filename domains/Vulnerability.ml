open AbstractSyntax
open Config
open Apron
open InvMap

let block_label block = 
  match block with
  | A_empty l -> l
  | A_block (l,_,_) -> l

type 'a t = {
  safe: var list;
  vulnerables: var list;
  cons: 'a Abstract1.t array
}



let json_of_t fmt t: Yojson.Safe.t = 
  let str_vuln = String.concat "," (List.map (fun v -> v.varName) t.vulnerables) in
  let str_safe = String.concat "," (List.map (fun v -> v.varName) t.safe) in
  let str_cons =
    let string_of_cons x = Format.asprintf "%a" (fun fmt->  Abstract1.print fmt) x in 
    match Array.to_list (t.cons) with
    | [] -> ""
    | x::[] -> string_of_cons x
    | x::q -> 
    List.fold_left
    (fun acc c ->
      Format.asprintf "%s,%a" acc (fun fmt -> Abstract1.print fmt)  c;
      )
   ((string_of_cons x)) q
  in
  `Assoc (("Non-vulnerable", `String str_safe)::("Potentially vulnerable", `String str_vuln)::("Constraints",`String str_cons)::[])
(*("Potentially vulnerable", `String str_vuln)::("Constraints", `String str_cons) *)
let output_json fmt res vars:  Yojson.Safe.t = 
  let rec aux res : Yojson.Safe.t list= 
    match res with  
    | [] ->  []
    | t::q -> (json_of_t fmt t):: aux q
  in
  let l,l' = let rec aux res =
             match res with 
            | [] -> 0,0   
            | t::q -> let l,l' = aux q in l + List.length t.safe, l' + List.length t.vulnerables 
            in  aux res 
  in
  let maxsafe: Yojson.Safe.t = `Assoc ["Max safe", `Intlit (string_of_int (List.fold_left (fun m t ->  let cur = List.length t.safe in  if m < cur then cur else m) 0 res))] in
  let minvuln: Yojson.Safe.t = `Assoc ["Min vuln", `Intlit (string_of_int (List.fold_left (fun m t ->  let cur = List.length t.vulnerables in  if (cur < m)  then cur else m) l' res))] in
  let nb_vuln: Yojson.Safe.t = `Assoc ["Nb vuln", `Intlit (string_of_int (List.fold_left (fun m t ->  if List.length t.vulnerables > 0 then m+1 else m ) 0 res ))] in
  let total : Yojson.Safe.t= `Assoc ["Total",`Intlit (string_of_int (l + l'))] in 
  let res: Yojson.Safe.t =  `List (aux res) in  
  let stat: Yojson.Safe.t = `List (maxsafe::minvuln::nb_vuln::total::[]) in
  `Assoc (("res",res)::("stats",stat)::[])
let analyse vulnerable vars f m =
  (* get label at start of block *)
  let initialLabel = block_label f.funcBody in
  let i = (InvMap.find initialLabel m) in
  let s = output_json (fmt) (vulnerable i) vars in
  Config.vuln_res := s;
  Printf.printf "ici!!";
  Printf.printf "%s\n" (Yojson.Safe.to_string (!vuln_res));
  ()

  

