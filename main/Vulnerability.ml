open Domain
open DecisionTree
open AbstractSyntax
open Config
open Apron
open InvMap


let bwdMap_robust robust fmt vars f m =
  Format.printf "@[ environnment " ;
  List.iter (fun s -> Format.printf "%s " s.varName) vars ;
  Format.printf "@]\n\n" ;
  let printl fmt join =
    Format.printf "@[" ;
    List.iter
      (fun (l, nl, cns) ->
        Format.printf "@[" ;
        let _ =
          match l with
          | [] -> Format.printf "robust finished \n "
          | _ ->
              let _ =
                Format.printf "@[ Non-vulnerable:" ;
                Format.print_newline () ;
                Format.printf " " ;
                List.iter
                  (fun x -> Format.printf "%s{%s}-" x.varId x.varName)
                  l ;
                Format.printf "@]";
                Format.print_newline ()
              in
              let _ =
                Format.print_newline () ;
                Format.printf "@[ Potentially vulnerable:" ;
                Format.print_newline () ;
                Format.printf " " ;
                List.iter
                  (fun x -> Format.printf "%s{%s}-" x.varId x.varName)
                  nl ;
                Format.printf "@]";
                Format.print_newline ();
                Format.print_space ();
              in
              let _ = Format.printf "@[ Constraints :"; 
                      Format.print_newline (); 
                      Format.printf " " ;
              in
              let _ =
                Array.iter
                  (fun c ->
                    Abstract1.print Format.std_formatter c ;
                    Format.print_newline (); 
                    Format.printf " " ;
                    )
                  cns
              in
              Format.printf "@]\n";
              Format.print_newline () ;
              Format.printf "@[ + Join constraint:" ;
              (* TODO: Underapproximation join: let _ = Abstract1.print Format.std_formatter j in *)
              Format.printf "@]\n" 
        in
        Format.printf "@]" ; Format.print_newline () )
      join ;
    Format.printf "@]"
  in
  (* get label at start of block *)
  let block_label block = 
  match block with
  | A_empty l -> l
  | A_block (l,_,_) -> l
  in
  let initialLabel = block_label f.funcBody in
  let i = (InvMap.find initialLabel m) in
  printl fmt (robust i)

